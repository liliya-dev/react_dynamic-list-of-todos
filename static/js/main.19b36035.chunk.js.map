{"version":3,"sources":["App.tsx","Table.tsx","api.ts","Button.tsx","index.tsx"],"names":["initialState","Table","preparedList","sortTodos","sortBy","event","value","preventDefault","sorted","sort","a","b","aValue","bValue","localeCompare","className","scope","href","onClick","map","todo","key","uuid","type","readOnly","checked","completed","title","user","getData","url","fetch","then","response","json","tempData","data","Button","beforeLoaded","afterLoaded","getTodoList","findUserById","id","users","find","name","todos","list","userId","App","useState","isLoading","setIsLoading","isLoaded","setIsLoaded","isStarted","setIsStarted","setPreparedList","ReactDOM","render","document","getElementById"],"mappings":"qNAOIA,E,6DCFSC,EAAoC,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAC1DC,EAAS,SAACC,EAAuCC,GACrDD,EAAME,iBACN,IAAMC,EAAyB,YAAIN,GAAcO,MAAK,SAACC,EAAGC,GACxD,IAAMC,EAASF,EAAEJ,GACXO,EAASF,EAAEL,GAEjB,MAAsB,kBAAXO,GAAyC,kBAAXD,EAChCA,EAAOE,cAAcD,GAGP,kBAAXD,GAAyC,kBAAXC,GACpB,mBAAXD,GAA0C,mBAAXC,GAChCD,GAAUC,EAGb,KAGTV,EAAUK,IAGZ,OACE,2BAAOO,UAAU,sCACf,2BAAOA,UAAU,cACf,4BACE,wBAAIC,MAAM,OACR,uBAAGC,KAAK,IAAIC,QAAS,SAACb,GAAD,OAAWD,EAAOC,EAAO,eAA9C,cAIF,wBAAIW,MAAM,OACR,uBAAGC,KAAK,IAAIC,QAAS,SAACb,GAAD,OAAWD,EAAOC,EAAO,WAA9C,UAIF,wBAAIW,MAAM,OACR,uBAAGC,KAAK,IAAIC,QAAS,SAACb,GAAD,OAAWD,EAAOC,EAAO,UAA9C,WAMN,+BAEIH,EAAaiB,KAAI,SAAAC,GAAI,OACnB,wBAAIC,IAAKC,kBACP,4BAAI,2BAAOC,KAAK,WAAWC,UAAQ,EAACC,QAASL,EAAKM,aAClD,4BAAKN,EAAKO,OACV,4BAAKP,EAAKQ,a,uBCnDXC,EAAO,uCAAG,WAAUC,GAAV,eAAApB,EAAA,sEACEqB,MAAMD,GAC1BE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAFR,cACfC,EADe,yBAIdA,EAASC,MAJK,2CAAH,sDCMPC,EAA+B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACrDC,EAAW,uCAAG,qBAMTC,EANS,WAAA/B,EAAA,6DAMT+B,EANS,SAMIC,GAAa,IAAD,EAChC,iBAAOC,EAAMC,MAAK,SAAAhB,GAAI,OAAIA,EAAKc,KAAOA,YAAtC,aAAO,EAAoCG,MAN7CP,IADkB,SAGET,EDbA,2CCUF,cAGZiB,EAHY,gBAIEjB,EDbA,2CCSF,OAIZc,EAJY,OAUZI,EAAuBD,EAAM3B,KAAI,SAAAC,GACrC,MAAO,CACLsB,GAAItB,EAAKsB,GACTf,MAAOP,EAAKO,MACZD,UAAWN,EAAKM,UAChBE,KAAMa,EAAarB,EAAK4B,YAI5BT,EAAYQ,GAnBM,4CAAH,qDAsBjB,OACE,4BACExB,KAAK,SACLR,UAAU,2CACVG,QAASsB,GAET,uBAAGzB,UAAU,wBALf,eHkCWkC,EA1DO,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACnBC,EADmB,KACRC,EADQ,OAEMF,oBAAS,GAFf,mBAEnBG,EAFmB,KAETC,EAFS,OAGQJ,oBAAS,GAHjB,mBAGnBK,EAHmB,KAGRC,EAHQ,OAIcN,mBAAyB,IAJvC,mBAInBhD,EAJmB,KAILuD,EAJK,KAsB1B,OACE,iCAEKF,EAQG,4BACEhC,KAAK,SACLR,UAAU,2CACVG,QAAS,kBAAMuC,EAAgB,YAAIzD,MAEnC,uBAAGe,UAAU,wBALf,SANA,kBAAC,EAAD,CACEuB,aAtBS,WACnBc,GAAa,GACbI,GAAa,IAqBHjB,YAlBQ,SAACQ,GACnBU,EAAgBV,GAChB/C,EAAY,YAAO+C,GACnBK,GAAa,GACbE,GAAY,MA8BRH,EACI,uBAAGpC,UAAU,MAAb,eACA,qCAGJsC,EACI,kBAAC,EAAD,CAAOnD,aAAcA,EAAcC,UAjC7C,SAAmBK,GACjBiD,EAAgB,YAAIjD,OAiCZ,uCIzDZkD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.19b36035.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport './App.css';\nimport { preparedType } from './interfaces';\nimport { Table } from './Table';\nimport { Button } from './Button';\n\nlet initialState: preparedType[];\n\nconst App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isStarted, setIsStarted] = useState(false);\n  const [preparedList, setPreparedList] = useState<preparedType[]>([]);\n\n  const beforeLoaded = () => {\n    setIsLoading(true);\n    setIsStarted(true);\n  };\n\n  const afterLoaded = (list: preparedType[]) => {\n    setPreparedList(list);\n    initialState = [...list];\n    setIsLoading(false);\n    setIsLoaded(true);\n  };\n\n  function sortTodos(sorted: preparedType[]) {\n    setPreparedList([...sorted]);\n  }\n\n  return (\n    <section>\n      {\n        !isStarted\n          ? (\n            <Button\n              beforeLoaded={beforeLoaded}\n              afterLoaded={afterLoaded}\n            />\n          )\n          : (\n            <button\n              type=\"button\"\n              className=\"btn btn-dark ml shadow p-3 mb-5  rounded\"\n              onClick={() => setPreparedList([...initialState])}\n            >\n              <i className=\"material-icons left\" />\n              Reset\n            </button>\n          )\n      }\n\n      {\n        isLoading\n          ? <p className=\"ml\">Loading....</p>\n          : <></>\n      }\n      {\n        isLoaded\n          ? <Table preparedList={preparedList} sortTodos={sortTodos} />\n          : <></>\n      }\n    </section>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { uuid } from 'uuidv4';\nimport { preparedType, preparedListType } from './interfaces';\n\nexport const Table: React.FC<preparedListType> = ({ preparedList, sortTodos }) => {\n  const sortBy = (event: { preventDefault: () => void }, value: keyof preparedType) => {\n    event.preventDefault();\n    const sorted: preparedType[] = [...preparedList].sort((a, b) => {\n      const aValue = a[value];\n      const bValue = b[value];\n\n      if (typeof bValue === 'string' && typeof aValue === 'string') {\n        return aValue.localeCompare(bValue);\n      }\n\n      if ((typeof aValue === 'number' && typeof bValue === 'number')\n      || (typeof aValue === 'boolean' && typeof bValue === 'boolean')) {\n        return +aValue - +bValue;\n      }\n\n      return 1;\n    });\n\n    sortTodos(sorted);\n  };\n\n  return (\n    <table className=\"table table-striped table-bordered\">\n      <thead className=\"thead-dark\">\n        <tr>\n          <th scope=\"col\">\n            <a href=\"/\" onClick={(event) => sortBy(event, 'completed')}>\n              Completed\n            </a>\n          </th>\n          <th scope=\"col\">\n            <a href=\"/\" onClick={(event) => sortBy(event, 'title')}>\n              Title\n            </a>\n          </th>\n          <th scope=\"col\">\n            <a href=\"/\" onClick={(event) => sortBy(event, 'user')}>\n              User\n            </a>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          preparedList.map(todo => (\n            <tr key={uuid()}>\n              <td><input type=\"checkbox\" readOnly checked={todo.completed} /></td>\n              <td>{todo.title}</td>\n              <td>{todo.user}</td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n","export const URLTodos = 'https://mate.academy/students-api/todos';\nexport const URLUsers = 'https://mate.academy/students-api/users';\n\nexport const getData = async <T>(url: string): Promise<T[]> => {\n  const tempData = await fetch(url)\n    .then(response => response.json());\n\n  return tempData.data;\n};\n","import React from 'react';\nimport { todoType, userType, preparedType } from './interfaces';\nimport { getData, URLTodos, URLUsers } from './api';\n\ntype ButtonType = {\n  beforeLoaded: () => void;\n  afterLoaded: (list: preparedType[]) => void;\n};\n\nexport const Button: React.FC<ButtonType> = ({ beforeLoaded, afterLoaded }) => {\n  const getTodoList = async () => {\n    beforeLoaded();\n\n    const todos = await getData<todoType>(URLTodos);\n    const users = await getData<userType>(URLUsers);\n\n    function findUserById(id: number) {\n      return users.find(user => user.id === id)?.name;\n    }\n\n    const list: preparedType[] = todos.map(todo => {\n      return {\n        id: todo.id,\n        title: todo.title,\n        completed: todo.completed,\n        user: findUserById(todo.userId),\n      };\n    });\n\n    afterLoaded(list);\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-dark ml shadow p-3 mb-5  rounded\"\n      onClick={getTodoList}\n    >\n      <i className=\"material-icons left\" />\n      Load todos\n    </button>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}