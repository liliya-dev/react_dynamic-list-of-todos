{"version":3,"sources":["App.tsx","Table.tsx","api.ts","ButtonLoading.tsx","index.tsx"],"names":["initialState","Table","preparedList","sortTodos","useState","direction","setDirection","sortBy","value","sorted","sort","a","b","aValue","bValue","undefined","className","scope","type","onClick","map","todo","key","uuid","readOnly","checked","completed","title","user","getData","url","fetch","then","response","json","tempData","data","ButtonLoading","beforeLoaded","afterLoaded","getTodoList","findUserById","id","users","find","name","todos","list","userId","App","isLoading","setIsLoading","isLoaded","setIsLoaded","isStarted","setIsStarted","setPreparedList","ReactDOM","render","document","getElementById"],"mappings":"qNAMIA,E,6DCISC,EAAyB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAAgB,EACnCC,oBAAS,GAD0B,mBAC9DC,EAD8D,KACnDC,EADmD,KAE/DC,EAAS,SAACC,GACd,IAAMC,EAAyB,YAAIP,GAAcQ,MAAK,SAACC,EAAGC,GACxD,IAAMC,EAASF,EAAEH,GACXM,EAASF,EAAEJ,GAEjB,YAAeO,IAAXF,QAAmCE,IAAXD,UAA+BD,WAAkBC,EACvET,EACMQ,GAAUC,EAAU,GAAK,EAG3BD,GAAUC,EAAU,GAAK,EAG5B,KAGTR,GAAcD,GACdF,EAAUM,IAGZ,OACE,2BAAOO,UAAU,sCACf,2BAAOA,UAAU,cACf,4BACE,wBAAIC,MAAM,OACR,4BACED,UAAU,WACVE,KAAK,SACLC,QAAS,kBAAMZ,EAAO,eAHxB,cAQF,wBAAIU,MAAM,OACR,4BACEC,KAAK,SACLF,UAAU,WACVG,QAAS,kBAAMZ,EAAO,WAHxB,UAQF,wBAAIU,MAAM,OACR,4BACEC,KAAK,SACLF,UAAU,WACVG,QAAS,kBAAMZ,EAAO,UAHxB,WAUN,+BAEIL,EAAakB,KAAI,SAAAC,GAAI,OACnB,wBAAIC,IAAKC,kBACP,4BAAI,2BAAOL,KAAK,WAAWM,UAAQ,EAACC,QAASJ,EAAKK,aAClD,4BAAKL,EAAKM,OACV,4BAAKN,EAAKO,a,uBCpEXC,EAAO,uCAAG,WAAUC,GAAV,eAAAnB,EAAA,sEACEoB,MAAMD,GAC1BE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAFR,cACfC,EADe,yBAIdA,EAASC,MAJK,2CAAH,sDCMPC,EAAiC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACvDC,EAAW,uCAAG,qBAMTC,EANS,WAAA9B,EAAA,6DAMT8B,EANS,SAMIC,GAAa,IAAD,EAChC,iBAAOC,EAAMC,MAAK,SAAAhB,GAAI,OAAIA,EAAKc,KAAOA,YAAtC,aAAO,EAAoCG,MAN7CP,IADkB,SAGET,EDbA,2CCUF,cAGZiB,EAHY,gBAIEjB,EDbA,2CCSF,OAIZc,EAJY,OAUZI,EAAuBD,EAAM1B,KAAI,SAAAC,GACrC,MAAO,CACLqB,GAAIrB,EAAKqB,GACTf,MAAON,EAAKM,MACZD,UAAWL,EAAKK,UAChBE,KAAMa,EAAapB,EAAK2B,YAI5BT,EAAYQ,GAnBM,4CAAH,qDAsBjB,OACE,4BACE7B,KAAK,SACLF,UAAU,2CACVG,QAASqB,GAET,uBAAGxB,UAAU,wBALf,eH6BWiC,EAtDO,WAAO,IAAD,EACQ7C,oBAAS,GADjB,mBACnB8C,EADmB,KACRC,EADQ,OAEM/C,oBAAS,GAFf,mBAEnBgD,EAFmB,KAETC,EAFS,OAGQjD,oBAAS,GAHjB,mBAGnBkD,EAHmB,KAGRC,EAHQ,OAIcnD,mBAAyB,IAJvC,mBAInBF,EAJmB,KAILsD,EAJK,KAsB1B,OACE,iCAEKF,EAQG,4BACEpC,KAAK,SACLF,UAAU,2CACVG,QAAS,kBAAMqC,EAAgB,YAAIxD,MAHrC,SANA,kBAAC,EAAD,CACEsC,aAtBS,WACnBa,GAAa,GACbI,GAAa,IAqBHhB,YAlBQ,SAACQ,GACnBS,EAAgBT,GAChB/C,EAAY,YAAO+C,GACnBI,GAAa,GACbE,GAAY,MA6BRH,GAAW,uBAAGlC,UAAU,MAAb,eAIXoC,GAAU,kBAAC,EAAD,CAAOlD,aAAcA,EAAcC,UA9BnD,SAAmBM,GACjB+C,EAAgB,YAAI/C,SIvBxBgD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3049b8cd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { TodoWithUser } from './interfaces';\nimport { Table } from './Table';\nimport { ButtonLoading } from './ButtonLoading';\n\nlet initialState: TodoWithUser[];\n\nconst App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isStarted, setIsStarted] = useState(false);\n  const [preparedList, setPreparedList] = useState<TodoWithUser[]>([]);\n\n  const beforeLoaded = () => {\n    setIsLoading(true);\n    setIsStarted(true);\n  };\n\n  const afterLoaded = (list: TodoWithUser[]) => {\n    setPreparedList(list);\n    initialState = [...list];\n    setIsLoading(false);\n    setIsLoaded(true);\n  };\n\n  function sortTodos(sorted: TodoWithUser[]) {\n    setPreparedList([...sorted]);\n  }\n\n  return (\n    <section>\n      {\n        !isStarted\n          ? (\n            <ButtonLoading\n              beforeLoaded={beforeLoaded}\n              afterLoaded={afterLoaded}\n            />\n          )\n          : (\n            <button\n              type=\"button\"\n              className=\"btn btn-dark ml shadow p-3 mb-5  rounded\"\n              onClick={() => setPreparedList([...initialState])}\n            >\n              Reset\n            </button>\n          )\n      }\n\n      {\n        isLoading&&<p className=\"ml\">Loading....</p>\n\n      }\n      {\n        isLoaded&&<Table preparedList={preparedList} sortTodos={sortTodos} />\n      }\n    </section>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport { TodoWithUser } from './interfaces';\n\ninterface Props {\n  preparedList: TodoWithUser[];\n  sortTodos: (list: TodoWithUser[]) => void;\n}\n\nexport const Table: React.FC<Props> = ({ preparedList, sortTodos }) => {\n  const [direction, setDirection] = useState(false);\n  const sortBy = (value: keyof TodoWithUser) => {\n    const sorted: TodoWithUser[] = [...preparedList].sort((a, b) => {\n      const aValue = a[value];\n      const bValue = b[value];\n\n      if (aValue !== undefined && bValue !== undefined && typeof aValue === typeof bValue) {\n        if (direction) {\n          return (aValue <= bValue) ? 1 : -1;\n        }\n\n        return (aValue >= bValue) ? 1 : -1;\n      }\n\n      return 1;\n    });\n\n    setDirection(!direction);\n    sortTodos(sorted);\n  };\n\n  return (\n    <table className=\"table table-striped table-bordered\">\n      <thead className=\"thead-dark\">\n        <tr>\n          <th scope=\"col\">\n            <button\n              className=\"sort_btn\"\n              type=\"button\"\n              onClick={() => sortBy('completed')}\n            >\n              Completed\n            </button>\n          </th>\n          <th scope=\"col\">\n            <button\n              type=\"button\"\n              className=\"sort_btn\"\n              onClick={() => sortBy('title')}\n            >\n              Title\n            </button>\n          </th>\n          <th scope=\"col\">\n            <button\n              type=\"button\"\n              className=\"sort_btn\"\n              onClick={() => sortBy('user')}\n            >\n              User\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          preparedList.map(todo => (\n            <tr key={uuid()}>\n              <td><input type=\"checkbox\" readOnly checked={todo.completed} /></td>\n              <td>{todo.title}</td>\n              <td>{todo.user}</td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n","export const URLTodos = 'https://mate.academy/students-api/todos';\nexport const URLUsers = 'https://mate.academy/students-api/users';\n\nexport const getData = async <T>(url: string): Promise<T[]> => {\n  const tempData = await fetch(url)\n    .then(response => response.json());\n\n  return tempData.data;\n};\n","import React from 'react';\nimport { Todo, User, TodoWithUser } from './interfaces';\nimport { getData, URLTodos, URLUsers } from './api';\n\ninterface Props {\n  beforeLoaded: () => void;\n  afterLoaded: (list: TodoWithUser[]) => void;\n}\n\nexport const ButtonLoading: React.FC<Props> = ({ beforeLoaded, afterLoaded }) => {\n  const getTodoList = async () => {\n    beforeLoaded();\n\n    const todos = await getData<Todo>(URLTodos);\n    const users = await getData<User>(URLUsers);\n\n    function findUserById(id: number) {\n      return users.find(user => user.id === id)?.name;\n    }\n\n    const list: TodoWithUser[] = todos.map(todo => {\n      return {\n        id: todo.id,\n        title: todo.title,\n        completed: todo.completed,\n        user: findUserById(todo.userId),\n      };\n    });\n\n    afterLoaded(list);\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-dark ml shadow p-3 mb-5  rounded\"\n      onClick={getTodoList}\n    >\n      <i className=\"material-icons left\" />\n      Load todos\n    </button>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}